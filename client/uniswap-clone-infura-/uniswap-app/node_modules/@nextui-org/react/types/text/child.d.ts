import React, { ReactNode } from 'react';
import { CSS } from '../theme/stitches.config';
import { SimpleColors, TextTransforms } from '../utils/prop-types';
import { TextVariantsProps } from './text.styles';
declare type As = keyof JSX.IntrinsicElements | React.ComponentType<any>;
export interface Props {
    tag: keyof JSX.IntrinsicElements;
    children?: ReactNode;
    color?: SimpleColors | string;
    size?: string | number;
    margin?: string | number;
    transform?: TextTransforms;
    css?: CSS;
    as?: As;
}
declare const defaultProps: {
    color: string;
};
declare type NativeAttrs = Omit<React.HTMLAttributes<unknown>, keyof Props>;
export declare type TextChildProps = Props & typeof defaultProps & NativeAttrs & TextVariantsProps;
export declare const TextChild: React.ForwardRefExoticComponent<Props & {
    color: string;
} & NativeAttrs & import("@stitches/react/types/styled-component").TransformProps<{
    weight?: "light" | "normal" | "bold" | "extrabold" | "black" | "hairline" | "thin" | "medium" | "semibold" | undefined;
}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}> & React.RefAttributes<HTMLElement>>;
declare const _default: React.ComponentType<Partial<{
    color: string;
}> & Omit<Props & {
    color: string;
} & NativeAttrs & import("@stitches/react/types/styled-component").TransformProps<{
    weight?: "light" | "normal" | "bold" | "extrabold" | "black" | "hairline" | "thin" | "medium" | "semibold" | undefined;
}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}> & React.RefAttributes<HTMLElement>, "color">>;
export default _default;
