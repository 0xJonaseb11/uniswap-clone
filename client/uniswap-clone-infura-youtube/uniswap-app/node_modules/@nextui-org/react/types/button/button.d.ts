import React, { PropsWithoutRef, RefAttributes } from 'react';
import type { PressEvents, FocusableProps } from '@react-types/shared';
import type { AriaButtonProps } from '@react-types/button';
import { CSS } from '../theme/stitches.config';
import { NormalColors } from '../utils/prop-types';
import ButtonGroup from './button-group';
import { ButtonVariantsProps } from './button.styles';
export interface Props extends PressEvents, FocusableProps, AriaButtonProps {
    light?: boolean;
    color?: NormalColors;
    flat?: boolean;
    animated?: boolean;
    disabled?: boolean;
    ghost?: boolean;
    bordered?: boolean;
    auto?: boolean;
    ripple?: boolean;
    icon?: React.ReactNode;
    iconRight?: React.ReactNode;
    onClick?: React.MouseEventHandler<HTMLButtonElement>;
    as?: keyof JSX.IntrinsicElements;
    className?: string;
    children?: React.ReactNode | undefined;
    iconLeftCss?: CSS;
    iconRightCss?: CSS;
}
declare type NativeAttrs = Omit<React.ButtonHTMLAttributes<unknown>, keyof Props>;
export declare type ButtonProps = Props & NativeAttrs & Omit<ButtonVariantsProps, 'isPressed' | 'isHovered' | 'isChildLess'> & {
    css?: CSS;
};
declare type ButtonComponent<T, P = {}> = React.ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>> & {
    Group: typeof ButtonGroup;
};
declare const _default: ButtonComponent<HTMLElement, ButtonProps>;
export default _default;
